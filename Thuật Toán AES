from flask import Flask, request, send_file, render_template_string
from Crypto.Cipher import AES
from io import BytesIO
from pyngrok import conf, ngrok

app = Flask(__name__)

# Gán mã ngrok token
conf.get_default().auth_token = "2xQxIZHjfkrQTfRgzubeEAE7YPU_3szvQWGuhpJg6yeJtsbSA"

# Padding dữ liệu thành bội số 16 (block AES)
def pad(data: bytes) -> bytes:
    pad_len = 16 - len(data) % 16
    return data + bytes([pad_len] * pad_len)

# Bỏ padding sau khi giải mã
def unpad(data: bytes) -> bytes:
    pad_len = data[-1]
    return data[:-pad_len]

# Hàm mã hóa file với AES
def encrypt_file(data: bytes, key: str) -> bytes:
    if len(key) != 16:
        raise ValueError("Khóa phải có đúng 16 ký tự.")
    cipher = AES.new(key.encode(), AES.MODE_ECB)
    encrypted = cipher.encrypt(pad(data))
    return encrypted

# Hàm giải mã file với AES
def decrypt_aes(data: bytes, key: str) -> bytes:
    if len(key) != 16:
        raise ValueError("Khóa phải có đúng 16 ký tự.")
    cipher = AES.new(key.encode(), AES.MODE_ECB)
    decrypted = cipher.decrypt(data)
    return unpad(decrypted)

# HTML giao diện web
HTML = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>AES Encryption/Decryption</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(to right, #6dd5ed, #2193b0);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 16px;
            padding: 30px 40px;
            max-width: 420px;
            width: 100%;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

        h1 {
            text-align: center;
            margin-bottom: 25px;
            color: #333;
            font-size: 24px;
        }

        form {
            display: flex;
            flex-direction: column;
        }

        input[type="file"],
        input[type="text"],
        select,
        input[type="submit"] {
            margin-bottom: 15px;
            padding: 12px;
            font-size: 16px;
            border-radius: 8px;
            border: 1px solid #ccc;
        }

        input[type="submit"] {
            background: #28a745;
            color: white;
            font-weight: bold;
            border: none;
            transition: background 0.3s ease;
        }

        input[type="submit"]:hover {
            background: #218838;
        }

        .error {
            color: red;
            font-weight: bold;
            text-align: center;
            margin-top: 10px;
        }

        .success {
            color: green;
            font-weight: bold;
            text-align: center;
        }

        @media (max-width: 500px) {
            .container {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>AES Encrypt/Decrypt</h1>
        {% if error %}
            <p class="error">{{ error }}</p>
        {% endif %}
        <form method="post" enctype="multipart/form-data" onsubmit="return validateForm()">
            <input type="file" name="file" id="file" required>
            <input type="text" name="key" id="key" placeholder="key" required>
            <select name="mode">
                <option value="encrypt">Encrypt</option>
                <option value="decrypt">Decrypt</option>
            </select>
            <input type="submit" value="Submit">
        </form>
        <p id="form-error" class="error" style="display:none;"></p>
    </div>

    <script>
        function validateForm() {
            const key = document.getElementById("key").value;
            const file = document.getElementById("file").value;
            const errorElement = document.getElementById("form-error");

            if (!file) {
                errorElement.textContent = "Please select a file.";
                errorElement.style.display = "block";
                return false;
            }

            if (key.length !== 16) {
                errorElement.textContent = "Key must be exactly 16 characters.";
                errorElement.style.display = "block";
                return false;
            }

            errorElement.style.display = "none";
            return true;
        }
    </script>
</body>
</html>
'''


@app.route('/', methods=['GET', 'POST'])
def home():
    error = None
    if request.method == 'POST':
        f = request.files['file']
        key = request.form['key']
        mode = request.form['mode']
        data = f.read()

        try:
            if mode == 'encrypt':
                result = encrypt_file(data, key)
                filename = f"ma_hoa_{f.filename}"
            else:
                result = decrypt_aes(data, key)
                filename = f"giai_ma_{f.filename}"

            buffer = BytesIO(result)
            buffer.seek(0)
            return send_file(buffer, as_attachment=True, download_name=filename)
        except Exception as e:
            error = f"Lỗi: {e}"

    return render_template_string(HTML, error=error)

# Khởi tạo ngrok
public_url = ngrok.connect(5000)
print(f"📌 Truy cập web tại: {public_url}")

# Chạy Flask
app.run(port=5000, use_reloader=False)
